FORMS


------  -----   ------  -----   -----   -----   -----

On a standard vanilla form, it typically has this structure:

<form

    <div class='form-group'

        <label for='name'> name </label>
        <input class='form-control'> Name</input>


         <label for='email'> email </label>
         <input class='form-control'> Email</input>

    </div

</form

    * container that holds inputs needs class of form-group
    * the inputs need class of form-control to signify that they belong to the form group.
    * form-group displays the container as a block- el && gives the margin bottom
    * form-control gives most of the styling
    * usually need a label and an input


------  -----   ------  -----   -----   -----   -----


Some of the highlights from this push:

    SELECT INPUTS, TEXT AREAS, FILE INPUT/UPLOADS, SILDERS/RANGE, INLINE FORM INPUTS, CHECK BOXES, VALIDATIONS


    * form-control-sm|md|lg|xl ==> sizing && re-sizing
    * <small class='form-text'> : formats for info regarding the input
    * readonly : disables data entry into an input : useful maybe to activate when conditions are met
    * form-control-file: used to format things such as buttons needed to upload files
    * custom-file, custom-file-input, custom-file-label : like form-control-file but better looking
    * SLIDER: range ==> look in the code for examples: custom-range
    * form-inline: useful for forms like LOGIN  that have a couple inputs that spanning a row would be a better approach to styling
    * CHECKBOXES : form-check, form-check-label, form-check-input
    * NOTE: although row and col were used in this, haven't looked at the grid yet

    VALIDATIONS

        - Each input needs a class='form-control'
        - Each input needs to get wrapped in a <div w/ <div class='form-group'>
        - Error msg : gets placed in a div below input: <div class='invalid-feedback'>

        - NOTE: is-valid or is-invalid belongs in the input: With react, we'll insert on state change that accompanies onSubmit
            thus, the when is-valid | is-invalid gets injected, the input field border will change colors depending if the data is valid.
            If you remove is-valid | is-invalid from the input class, <div class='invalid-feedback'> containing the error WILL NOT RENDER.
            This is good to know so that you can write less code: Trigger the msg depending on state.

    * is-valid, is-invalid <-- both used to recolor input field to change the border color
    * invalid-feedback, <---- used in the <div class='invalid-feedback'> to display the err msg